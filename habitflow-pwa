<!DOCTYPE html>
<html lang="tr" class="">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HabitFlow - Sosyal Alışkanlık Koçu</title>
    
    <!-- PWA ve Mobil Cihaz Meta Etiketleri -->
    <meta name="theme-color" content="#6366f1">
    <link rel="manifest" href="data:application/manifest+json;base64,ew0KICAibmFtZSI6ICJBYmNoZ3JvdW5kIiwNCiAgInNob3J0X25hbWUiOiAiYWJjIiwNCiAgInN0YXJ0X3VybCI6ICIuIiwNCiAgImRpc3BsYXkiOiAic3RhbmRhbG9uZSIsDQogICJiYWNrZ3JvdW5kX2NvbG9yIjogIiNmN2Y4ZmMiLA0KICAidGhlbWVfY29sb3IiOiAiIzYzNjZmMSIsDQogICJkZXNjcmlwdGlvbiI6ICJBcmtknZnFn8SxbGFyxLFubGEgYmlybGlrdGUgYWzEscWfa2FubMSxayxhcsSxbcSxIGdlbGnFn3Rpci4iLA0KICAiaWNvbnMiOiBbDQogICAgew0KICAgICAgInNyYyI6ICJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgdmlld0JveD0nMCAwIDEwMCAxMDAnJTNFJTNDcmVjdCB3aWR0aD0nMTAwJyBoZWlnaHQ9JzEwMCcgcng9JzIwJyBmaWxsPScjNjM2NmYxJy8lM0VJTNDcGF0aCBkPSdNMzAgNzAgQyA0MCA0MCwgNjAgNDAsIDcwIDcwJyBzdHJva2U9J3doaXRlJyBzdHJva2Utd2lkdGg9JzgnIGZpbGw9J25vbmUnIHN0cm9rZS1saW5lY2FwPSdyb3VuZCcvJTNFJTNDcGF0aCBkPSdNNDAgNjAgQyA0NSA1MCwgNTUgNTAsIDYwIDYwJyBzdHJva2U9J3doaXRlJyBzdHJva2Utd2lkdGg9JzgnIGZpbGw9J25vbmUnIHN0cm9rZS1saW5lY2FwPSdyb3VuZCcvJTNFJTNDY2lyY2xlIGN4PSc1MCcgY3k9JzM1JyByPSc4JyBmaWxsPSd3aGl0ZScvJTNFJTNDL3N2ZyUzRQ0KIiwNCiAgICAgICJzaXplcyI6ICIxOTJ4MTkyIiwNCiAgICAgICJ0eXBlIjogImltYWdlL3N2Zyt4bWwiDQogICAgfSwNCiAgICB7DQogICAgICAic3JjIjogImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB2aWV3Qm94PScwIDAgMTAwIDEwMCclM0UlM0NyZWN0IHdpZHRoPScxMDAnIGhlaWdodD0nMTAwJyByeD0nMjAnIGZpbGw9JyM2MzY2ZjEnLz4lM0VJTNDcGF0aCBkPSdNMzAgNzAgQyA0MCA0MCwgNjAgNDAsIDcwIDcwJyBzdHJva2U9J3doaXRlJyBzdHJva2Utd2lkdGg9JzgnIGZpbGw9J25vbmUnIHN0cm9rZS1saW5lY2FwPSdyb3VuZCcvJTNFJTNDcGF0aCBkPSdNNDAgNjAgQyA0NSA1MCwgNTUgNTAsIDYwIDYwJyBzdHJva2U9J3doaXRlJyBzdHJva2Utd2lkdGg9JzgnIGZpbGw9J25vbmUnIHN0cm9rZS1saW5lY2FwPSdyb3VuZCcvJTNFJTNDY2lyY2xlIGN4PSc1MCcgY3k9JzM1JyByPSc4JyBmaWxsPSd3aGl0ZScvJTNFJTNDL3N2ZyUzRQ0KIiwNCiAgICAgICJzaXplcyI6ICI1MTJ4NTEyIiwNCiAgICAgICJ0eXBlIjogImltYWdlL3N2Zyt4bWwiDQogICAgfQ0KICBdDQp9DQo=">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-mobile-web-app-title" content="HabitFlow">
    <link rel="apple-touch-icon" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Crect width='100' height='100' rx='20' fill='%236366f1'/%3E%3Cpath d='M30 70 C 40 40, 60 40, 70 70' stroke='white' stroke-width='8' fill='none' stroke-linecap='round'/%3E%3Cpath d='M40 60 C 45 50, 55 50, 60 60' stroke='white' stroke-width='8' fill='none' stroke-linecap='round'/%3E%3Ccircle cx='50' cy='35' r='8' fill='white'/%3E%3C/svg%3E">
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            -webkit-tap-highlight-color: transparent;
        }
        .habit-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 8px;
        }
        @media (min-width: 768px) {
            .habit-grid {
                grid-template-columns: repeat(10, 1fr);
            }
        }
        .day-circle {
            width: 100%;
            padding-bottom: 100%;
            position: relative;
        }
        .day-circle-content {
            position: absolute;
            top: 0; left: 0; right: 0; bottom: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 11px;
            transition: all 0.2s ease-in-out;
            border-radius: 9999px;
        }
        .day-circle:hover .day-circle-content {
            transform: scale(1.1);
        }
        .progress-bar-fill {
            background: linear-gradient(to right, #818cf8, #6366f1);
            transition: width 0.5s ease-in-out;
        }
        .modal-overlay {
            position: fixed;
            top: 0; left: 0; right: 0; bottom: 0;
            background: rgba(10, 10, 25, 0.5);
            backdrop-filter: blur(8px);
            -webkit-backdrop-filter: blur(8px);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 50;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s, visibility 0.3s;
        }
        .modal-overlay.visible {
            opacity: 1;
            visibility: visible;
        }
        .modal-content {
            transform: translateY(20px);
            transition: transform 0.3s;
        }
        .modal-overlay.visible .modal-content {
            transform: translateY(0);
        }
        #modal-body ol {
            padding-left: 1.5rem;
            list-style-type: decimal;
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }
        .view-tab.active {
            background-color: #6366f1; /* indigo-600 */
            color: white;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
        }
        #toast-notification {
            position: fixed;
            bottom: -100px;
            left: 50%;
            transform: translateX(-50%);
            transition: bottom 0.5s ease-in-out;
            z-index: 100;
        }
         #toast-notification.show {
            bottom: 20px;
        }
        @keyframes pop-animation {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        .animate-pop {
            animation: pop-animation 0.3s ease-in-out;
        }
        .dropdown {
            position: relative;
            display: inline-block;
        }
        .dropdown-content {
            display: none;
            position: absolute;
            right: 0;
            background-color: #f1f1f1;
            min-width: 160px;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 1;
            border-radius: 0.5rem;
            overflow: hidden;
        }
        .dropdown-content button {
            color: black;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
            width: 100%;
            text-align: left;
        }
        .dropdown-content button:hover {background-color: #ddd;}
        .dropdown:hover .dropdown-content {display: block;}

        .dark .dropdown-content { background-color: #374151; } /* gray-700 */
        .dark .dropdown-content button { color: white; }
        .dark .dropdown-content button:hover { background-color: #4b5563; } /* gray-600 */

    </style>
    <script>
        // FOUC (Flash of Unstyled Content) önlemek için tema sınıfını hemen ayarla
        if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
          document.documentElement.classList.add('dark')
        } else {
          document.documentElement.classList.remove('dark')
        }
    </script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        // Tailwind'e karanlık mod için 'class' stratejisini kullanmasını söyle
        tailwind.config = {
          darkMode: 'class',
        }
    </script>
</head>
<body class="bg-slate-100 dark:bg-slate-900 text-slate-800 dark:text-slate-200 transition-colors duration-300">

    <div id="app-container" class="container mx-auto max-w-2xl p-4 sm:p-6 md:p-8">
        <header class="relative text-center mb-10 sm:mb-12">
            <h1 class="text-4xl sm:text-5xl font-extrabold text-slate-800 dark:text-white">HabitFlow</h1>
            <p class="text-slate-500 dark:text-slate-400 mt-2 text-base sm:text-lg">Arkadaşlarınla birlikte alışkanlıklarını geliştir.</p>
             <button id="theme-toggle" class="absolute top-0 right-0 p-2 rounded-full text-slate-500 dark:text-slate-400 hover:bg-slate-200 dark:hover:bg-slate-800 transition">
                <i class="fas fa-sun" id="theme-icon-light"></i>
                <i class="fas fa-moon hidden" id="theme-icon-dark"></i>
            </button>
        </header>
        
        <div id="auth-info" class="mb-4 p-3 bg-indigo-100 dark:bg-indigo-900/50 border border-indigo-200 dark:border-indigo-800 text-indigo-800 dark:text-indigo-300 rounded-xl text-sm text-center break-all shadow-sm flex flex-col items-center gap-2">
            Yükleniyor...
        </div>

        <div class="bg-white dark:bg-slate-800 p-5 sm:p-6 rounded-2xl shadow-lg border border-slate-100 dark:border-slate-700 mb-10">
            <h2 class="text-xl sm:text-2xl font-bold mb-4 text-slate-700 dark:text-slate-200">Arkadaşlarım</h2>
            <form id="add-friend-form" class="flex flex-col sm:flex-row gap-3 mb-4">
                <input type="text" id="friend-id-input" placeholder="Arkadaşının Kullanıcı ID'si" class="flex-grow p-4 bg-slate-100 dark:bg-slate-700 border border-slate-200 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-indigo-500 transition text-slate-800 dark:text-slate-200" required>
                <button type="submit" title="Arkadaş ekle" class="bg-sky-500 hover:bg-sky-600 text-white font-bold h-14 px-6 rounded-lg transition-all duration-300 ease-in-out transform hover:scale-105 shadow-md hover:shadow-sky-300">
                    <i class="fas fa-user-plus"></i>
                </button>
            </form>
            <div id="friend-list" class="space-y-2"></div>
        </div>

        <div id="add-habit-section" class="bg-white dark:bg-slate-800 p-5 sm:p-6 rounded-2xl shadow-lg border border-slate-100 dark:border-slate-700 mb-10 sm:mb-12">
            <h2 class="text-xl sm:text-2xl font-bold mb-4 text-slate-700 dark:text-slate-200">Yeni Alışkanlık Ekle</h2>
            <form id="add-habit-form" class="flex flex-col sm:flex-row gap-3">
                <input type="text" id="habit-input" placeholder="Örn: Günde 15 dakika oku" class="flex-grow p-4 bg-slate-100 dark:bg-slate-700 border border-slate-200 dark:border-slate-600 rounded-lg focus:ring-2 focus:ring-indigo-500 transition text-slate-800 dark:text-slate-200" required>
                <div class="flex gap-3">
                     <button type="button" data-action="get-idea" title="AI'dan fikir al" class="bg-amber-400 hover:bg-amber-500 text-white font-bold w-14 h-14 rounded-lg transition-all duration-300 ease-in-out transform hover:scale-105 shadow-md hover:shadow-amber-200 flex-shrink-0">
                        <i class="fas fa-lightbulb"></i>
                    </button>
                    <button type="submit" title="Yeni alışkanlık ekle" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold w-14 h-14 rounded-lg transition-all duration-300 ease-in-out transform hover:scale-105 shadow-md hover:shadow-indigo-300 flex-shrink-0">
                        <i class="fas fa-plus"></i>
                    </button>
                </div>
            </form>
        </div>

        <div class="mb-6">
            <h3 class="text-lg font-bold text-slate-600 dark:text-slate-300 mb-3">Görünüm</h3>
            <div id="view-tabs" class="flex flex-wrap gap-2"></div>
        </div>

        <div id="habit-list" class="space-y-5"></div>

        <div id="loader" class="text-center py-10">
            <i class="fas fa-spinner fa-spin fa-3x text-indigo-500"></i>
        </div>
        
        <div id="empty-state" class="hidden text-center py-16 sm:py-20 bg-white dark:bg-slate-800 rounded-2xl shadow-md border border-slate-100 dark:border-slate-700"></div>
    </div>
    
    <div id="action-plan-modal" class="modal-overlay">
         <div class="modal-content bg-white dark:bg-slate-800 rounded-2xl shadow-2xl p-6 w-11/12 max-w-md mx-auto">
            <div class="flex justify-between items-center mb-4">
                <h3 id="modal-title" class="text-2xl font-bold text-slate-800 dark:text-slate-100"></h3>
                <button data-action="close-modal" class="text-slate-400 dark:text-slate-500 hover:text-slate-800 dark:hover:text-slate-200 text-2xl">&times;</button>
            </div>
            <div id="modal-body" class="text-slate-600 dark:text-slate-300 space-y-2 max-h-[60vh] overflow-y-auto pr-2"></div>
        </div>
    </div>

    <div id="toast-notification" class="p-4 rounded-lg text-white shadow-lg"></div>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, onAuthStateChanged, signInWithCustomToken } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, doc, addDoc, getDoc, setDoc, onSnapshot, deleteDoc, updateDoc, serverTimestamp, query, where } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        
        // --- UYGULAMA YAPILANDIRMASI VE DEĞİŞKENLER ---
        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-habit-tracker';
        const XP_PER_COMPLETION = 10;

        // --- GLOBAL DURUM (STATE) DEĞİŞKENLERİ ---
        let app, auth, db, userId, habitsCollectionRef, friendsCollectionRef;
        let isAuthReady = false;
        let friends = [];
        let currentView = null;
        let toastTimeout;
        let listenersAttached = false;

        // --- UI ELEMENTLERİ ---
        const ui = {
            appContainer: document.getElementById('app-container'),
            habitForm: document.getElementById('add-habit-form'),
            habitInput: document.getElementById('habit-input'),
            habitList: document.getElementById('habit-list'),
            loader: document.getElementById('loader'),
            emptyState: document.getElementById('empty-state'),
            authInfo: document.getElementById('auth-info'),
            addFriendForm: document.getElementById('add-friend-form'),
            friendIdInput: document.getElementById('friend-id-input'),
            friendList: document.getElementById('friend-list'),
            viewTabs: document.getElementById('view-tabs'),
            addHabitSection: document.getElementById('add-habit-section'),
            actionPlanModal: document.getElementById('action-plan-modal'),
            modalTitle: document.getElementById('modal-title'),
            modalBody: document.getElementById('modal-body'),
            toast: document.getElementById('toast-notification'),
            themeToggle: document.getElementById('theme-toggle'),
            themeIconLight: document.getElementById('theme-icon-light'),
            themeIconDark: document.getElementById('theme-icon-dark'),
        };
        
        // --- YARDIMCI (UTILITY) FONKSİYONLAR ---
        function showToast(message, type = 'success') {
            clearTimeout(toastTimeout);
            ui.toast.textContent = message;
            ui.toast.className = 'p-4 rounded-lg text-white shadow-lg ';
            ui.toast.classList.add(type === 'success' ? 'bg-green-500' : 'bg-red-500');
            ui.toast.classList.add('show');
            toastTimeout = setTimeout(() => { ui.toast.classList.remove('show'); }, 3000);
        }
        const getXPForNextLevel = (level) => Math.floor(50 * Math.pow(1.2, level - 1));
        const getTodayDateString = () => new Date().toISOString().split('T')[0];
        const isCompletedToday = (completions) => completions && completions.includes(getTodayDateString());
        const escapeHTML = (str) => {
            const p = document.createElement("p");
            p.textContent = str;
            return p.innerHTML;
        };
        function parseMarkdownList(text) {
            const lines = text.split('\n').filter(line => line.trim().length > 0);
            let html = '<ol>';
            lines.forEach(line => {
                const cleanLine = line.replace(/^\d+\.\s*/, '').replace(/\*/g, '').trim();
                if(cleanLine) html += `<li>${escapeHTML(cleanLine)}</li>`;
            });
            html += '</ol>';
            return html;
        }
        function calculateStreak(completions) {
            if (!completions || completions.length === 0) return 0;
            const dates = new Set(completions.map(c => c.split('T')[0]));
            let streak = 0;
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            let currentDate = new Date(today);
            if (!dates.has(currentDate.toISOString().split('T')[0])) {
                currentDate.setDate(currentDate.getDate() - 1);
            }
            while (dates.has(currentDate.toISOString().split('T')[0])) {
                streak++;
                currentDate.setDate(currentDate.getDate() - 1);
            }
            return streak;
        }

        // --- RENDER FONKSİYONLARI ---
        function updateThemeIcon(isDark) {
            ui.themeIconDark.classList.toggle('hidden', !isDark);
            ui.themeIconLight.classList.toggle('hidden', isDark);
        }
        function renderAuthInfo() {
            ui.authInfo.innerHTML = `<div class="flex items-center gap-2"><strong>Kullanıcı ID:</strong><span id="user-id-text" class="truncate">${userId}</span></div>`;
            const copyButton = document.createElement('button');
            copyButton.innerHTML = '<i class="far fa-copy ml-2"></i> Kopyala';
            copyButton.className = "bg-indigo-200 dark:bg-indigo-800 dark:text-indigo-200 text-indigo-800 text-xs font-bold px-3 py-1 rounded-full hover:bg-indigo-300 dark:hover:bg-indigo-700 transition";
            copyButton.onclick = () => {
                const tempInput = document.createElement("input");
                document.body.appendChild(tempInput);
                tempInput.value = userId;
                tempInput.select();
                try {
                    document.execCommand('copy');
                    showToast("Kullanıcı ID'si kopyalandı!");
                } catch(err) {
                    console.error('Kopyalama başarısız oldu: ', err);
                    showToast("Kopyalama başarısız oldu.", "error");
                }
                document.body.removeChild(tempInput);
            };
            ui.authInfo.appendChild(copyButton);
        }
        function renderFriendList() {
            ui.friendList.innerHTML = '';
            if(friends.length === 0) {
                ui.friendList.innerHTML = `<p class="text-slate-500 dark:text-slate-400 text-sm">Henüz arkadaş eklemediniz.</p>`;
                return;
            }
            friends.forEach(friend => {
                const friendEl = document.createElement('div');
                friendEl.className = 'flex justify-between items-center bg-slate-100 dark:bg-slate-700 p-2 rounded-lg';
                friendEl.innerHTML = `<span class="text-sm text-slate-700 dark:text-slate-300 truncate">${friend.friendId}</span><button data-action="delete-friend" data-friend-id="${friend.friendId}" class="text-red-400 hover:text-red-600 transition p-1"><i class="fas fa-user-minus"></i></button>`;
                ui.friendList.appendChild(friendEl);
            });
        }
        function renderViewTabs() {
            ui.viewTabs.innerHTML = '';
            const myTab = document.createElement('button');
            myTab.innerText = "Benim Alışkanlıklarım";
            myTab.className = `view-tab px-4 py-2 rounded-lg font-semibold transition ${currentView === userId ? 'active' : 'bg-white dark:bg-slate-800 hover:bg-slate-200 dark:hover:bg-slate-700'}`;
            myTab.onclick = () => setView(userId);
            ui.viewTabs.appendChild(myTab);
            friends.forEach(friend => {
                const friendTab = document.createElement('button');
                friendTab.innerText = friend.friendId.substring(0, 8) + '...';
                friendTab.title = friend.friendId;
                friendTab.className = `view-tab px-4 py-2 rounded-lg font-semibold transition ${currentView === friend.friendId ? 'active' : 'bg-white dark:bg-slate-800 hover:bg-slate-200 dark:hover:bg-slate-700'}`;
                friendTab.onclick = () => setView(friend.friendId);
                ui.viewTabs.appendChild(friendTab);
            });
        }
        function renderHabits(habits) {
            ui.habitList.innerHTML = '';
            const isMyView = currentView === userId;
            habits.forEach(habit => {
                const card = document.createElement('div');
                card.className = 'bg-white dark:bg-slate-800 p-5 rounded-2xl shadow-lg border border-slate-100 dark:border-slate-700 flex flex-col gap-4';
                const { level = 1, xp = 0, name = "İsimsiz Alışkanlık", completions = [] } = habit;
                const xpForNext = getXPForNextLevel(level);
                const progressPercent = Math.min((xp / xpForNext) * 100, 100);
                const escapedHabitName = escapeHTML(name);
                const initial = name.charAt(0).toUpperCase();
                const streak = calculateStreak(completions);
                const actionButtonsHTML = isMyView ? `<div class="flex flex-col gap-3"><button id="complete-btn-${habit.id}" data-action="toggle-completion" data-habit-id="${habit.id}" data-date-string="${getTodayDateString()}" data-is-completed="${isCompletedToday(completions)}" class="${isCompletedToday(completions) ? 'bg-slate-400 dark:bg-slate-600 hover:bg-slate-500 dark:hover:bg-slate-500' : 'bg-green-500 hover:bg-green-600 shadow-md hover:shadow-green-200'} text-white font-semibold py-3 px-4 rounded-lg transition-all duration-300 transform hover:scale-[1.02]"><i class="fas ${isCompletedToday(completions) ? 'fa-times' : 'fa-check'} mr-2"></i><span>${isCompletedToday(completions) ? 'Geri Al' : 'Tamamlandı'}</span></button></div>` : '';
                const deleteButtonHTML = isMyView ? `<button data-action="delete-habit" data-habit-id="${habit.id}" class="text-slate-400 dark:text-slate-500 hover:text-red-500 transition-colors flex-shrink-0 pt-1"><i class="fas fa-trash-alt"></i></button>` : '';
                const aiCoachMenuHTML = isMyView ? `<div class="dropdown"><button class="bg-purple-500 hover:bg-purple-600 text-white font-semibold py-2 px-3 rounded-lg transition-all duration-300 shadow-md hover:shadow-purple-200"><i class="fas fa-ellipsis-h"></i> AI Koç</button><div class="dropdown-content"><button data-action="get-strength-analysis" data-habit-id="${habit.id}" data-habit-name="${escapedHabitName}" data-completions-count="${completions.length}" data-streak="${streak}"><i class="fas fa-brain w-6 text-center"></i> Analiz</button><button data-action="get-action-plan" data-habit-id="${habit.id}" data-habit-name="${escapedHabitName}"><i class="fas fa-magic-wand-sparkles w-6 text-center"></i> Eylem Planı</button></div></div>` : '';
                card.innerHTML = `<div class="flex items-start justify-between gap-4"><div class="flex items-center gap-4 flex-grow"><div class="w-12 h-12 rounded-full bg-indigo-100 dark:bg-indigo-900/50 text-indigo-600 dark:text-indigo-300 flex items-center justify-center text-xl font-bold flex-shrink-0">${initial}</div><div class="flex-grow"><h3 class="text-lg font-bold text-slate-800 dark:text-slate-100 break-all">${escapedHabitName}</h3><div class="flex items-center gap-4 mt-1 text-sm"><span class="font-semibold text-indigo-600 dark:text-indigo-400 flex items-center gap-1"><i class="fas fa-layer-group"></i> Seviye ${level}</span><span class="font-semibold text-amber-600 dark:text-amber-400 flex items-center gap-1"><i class="fas fa-fire"></i> ${streak} Gün</span></div></div></div><div class="flex items-center gap-2 flex-shrink-0">${aiCoachMenuHTML}${deleteButtonHTML}</div></div><div><div class="flex justify-between items-center mb-1.5 text-sm"><span class="text-slate-500 dark:text-slate-400">${xp} / ${xpForNext} XP</span></div><div class="w-full bg-slate-200 dark:bg-slate-700 rounded-full h-2.5"><div class="progress-bar-fill h-2.5 rounded-full" style="width: ${progressPercent}%"></div></div></div><div>${renderCalendarGrid(habit)}</div>${actionButtonsHTML}`;
                ui.habitList.appendChild(card);
            });
        }
        function renderCalendarGrid(habit) {
            let html = '<div class="habit-grid">';
            const today = new Date();
            const completions = new Set(habit.completions || []);
            for (let i = 29; i >= 0; i--) {
                const date = new Date(today);
                date.setDate(today.getDate() - i);
                const dateString = date.toISOString().split('T')[0];
                const isCompleted = completions.has(dateString);
                
                let dayClasses = 'day-circle-content ';
                if (isCompleted) {
                    dayClasses += 'bg-gradient-to-br from-indigo-500 to-purple-500 text-white shadow-sm';
                } else { dayClasses += 'bg-slate-200 dark:bg-slate-700'; }
                if (i === 0) { dayClasses += ' ring-2 ring-offset-2 ring-slate-100 dark:ring-offset-slate-900 ring-indigo-500'; }
                
                html += `<div class="day-circle" title="${date.toLocaleDateString('tr-TR')}"><div class="${dayClasses}">${isCompleted ? '<i class="fas fa-check"></i>' : ''}</div></div>`;
            }
            return html + '</div>';
        }

        // --- FIREBASE & AI FONKSİYONLARI ---
        async function callGemini(prompt) {
            const apiKey = "";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;
            const payload = { contents: [{ parts: [{ text: prompt }] }] };
            try {
                const response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
                if (!response.ok) throw new Error(`API error: ${response.statusText}`);
                const result = await response.json();
                return result.candidates?.[0]?.content?.parts?.[0]?.text || "AI'dan bir yanıt alınamadı.";
            } catch (error) {
                console.error('Gemini API hatası:', error);
                return "AI ile iletişim kurulamadı. Lütfen tekrar deneyin.";
            }
        }
        function listenForFriends() {
            if (!friendsCollectionRef) return;
            onSnapshot(query(friendsCollectionRef), (snapshot) => {
                friends = snapshot.docs.map(doc => doc.data());
                renderFriendList();
                renderViewTabs();
            });
        }
        function listenForHabits() {
            if (!habitsCollectionRef || !currentView) return;
            ui.loader.style.display = 'block';
            ui.habitList.innerHTML = '';
            ui.emptyState.classList.add('hidden');
            const q = query(habitsCollectionRef, where("ownerId", "==", currentView));
            onSnapshot(q, (snapshot) => {
                ui.loader.style.display = 'none';
                const habits = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                habits.sort((a, b) => (b.createdAt?.toMillis() || 0) - (a.createdAt?.toMillis() || 0));
                renderHabits(habits);
                const isMyView = currentView === userId;
                ui.emptyState.classList.toggle('hidden', !snapshot.empty);
                if (snapshot.empty) {
                    ui.emptyState.innerHTML = `<i class="fas fa-stream fa-4x text-slate-300 dark:text-slate-600 mb-4"></i><h3 class="text-xl sm:text-2xl font-semibold text-slate-700 dark:text-slate-200">${isMyView ? 'Henüz bir alışkanlık yok.' : 'Bu arkadaşın henüz alışkanlığı yok.'}</h3>${isMyView ? '<p class="text-slate-500 dark:text-slate-400 mt-2 px-4">Yukarıdan ilk alışkanlığınızı ekleyerek başlayın!</p>' : ''}`;
                }
            }, (error) => {
                console.error("Alışkanlıkları dinleme hatası:", error);
                ui.loader.style.display = 'none';
            });
        }

        // --- OLAY YÖNETİMİ & UYGULAMA MANTIĞI ---
        function setView(viewId) {
            currentView = viewId;
            ui.addHabitSection.style.display = (currentView === userId) ? 'block' : 'none';
            listenForHabits();
            renderViewTabs();
        }
        const modalUtils = { open: () => ui.actionPlanModal.classList.add('visible'), close: () => ui.actionPlanModal.classList.remove('visible') };
        
        function addEventListeners() {
            if (listenersAttached) return; 
            listenersAttached = true;
            
            document.body.addEventListener('click', async (e) => {
                const target = e.target.closest('button');
                if (!target) return;
                const action = target.dataset.action;
                if (!action) return;

                if (action === 'get-idea') {
                    const originalIcon = target.innerHTML;
                    target.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                    target.disabled = true;
                    const prompt = "Kişisel gelişim için basit ve etkili bir günlük alışkanlık öner. Sadece alışkanlığın kendisini yaz, açıklama yapma. Örneğin: 'Günde 10 sayfa kitap oku'. Cevap kısa ve net olsun.";
                    try {
                        const idea = await callGemini(prompt);
                        ui.habitInput.value = idea.replace(/["*]/g, '').trim();
                    } finally {
                        target.innerHTML = originalIcon;
                        target.disabled = false;
                    }
                } else if (action === 'delete-habit') {
                    const habitId = target.dataset.habitId;
                    if (habitId) {
                       try { await deleteDoc(doc(habitsCollectionRef, habitId)); } 
                       catch (error) { console.error("Alışkanlık silme hatası: ", error); }
                    }
                } else if (action === 'toggle-completion') {
                    const { habitId, dateString, isCompleted } = target.dataset;
                    if(habitId) {
                         const habitRef = doc(habitsCollectionRef, habitId);
                        try {
                            const docSnap = await getDoc(habitRef);
                            if (!docSnap.exists()) return;

                            let { completions = [], level = 1, xp = 0 } = docSnap.data();
                            const newCompletions = (isCompleted === 'true') ? completions.filter(d => d !== dateString) : [...new Set([...completions, dateString])];
                            
                            if (isCompleted !== 'true') {
                                xp += XP_PER_COMPLETION;
                                let xpForNext = getXPForNextLevel(level);
                                while (xp >= xpForNext) {
                                    level++;
                                    xp -= xpForNext;
                                    xpForNext = getXPForNextLevel(level);
                                }
                                target.classList.add('animate-pop');
                                target.addEventListener('animationend', () => target.classList.remove('animate-pop'), {once: true});
                            } else {
                                xp -= XP_PER_COMPLETION;
                                while (xp < 0) {
                                    if (level === 1) { xp = 0; break; }
                                    const xpForPreviousLevel = getXPForNextLevel(level - 1);
                                    level--;
                                    xp += xpForPreviousLevel;
                                }
                            }
                            await updateDoc(habitRef, { completions: newCompletions, level, xp });
                        } catch (error) { console.error("Tamamlama durumu güncelleme hatası: ", error); }
                    }
                } else if (action === 'get-strength-analysis') {
                    const { habitName, completionsCount, streak } = target.dataset;
                    modalUtils.open();
                    ui.modalTitle.innerText = "✨ AI Analizi";
                    ui.modalBody.innerHTML = '<div class="flex justify-center items-center p-8"><i class="fas fa-spinner fa-spin fa-2x text-indigo-500"></i></div>';
                    const prompt = `Bir kullanıcı '${habitName}' alışkanlığını takip ediyor. Son 30 günde bu alışkanlığı ${completionsCount} kez tamamladı ve şu anki başarı serisi ${streak} gün. Bu verilere dayanarak, kullanıcıya doğrudan hitap eden, 2-3 cümlelik kısa, motive edici bir analiz ve tutarlılığı artırmak için bir pratik ipucu ver. Konuşma tonun cesaretlendirici ve destekleyici olsun.`;
                    const analysis = await callGemini(prompt);
                    ui.modalBody.innerHTML = `<p>${escapeHTML(analysis)}</p>`;
                } else if (action === 'get-action-plan') {
                    const { habitName } = target.dataset;
                     modalUtils.open();
                    ui.modalTitle.innerText = "✨ Eylem Planı";
                    ui.modalBody.innerHTML = '<div class="flex justify-center items-center p-8"><i class="fas fa-spinner fa-spin fa-2x text-indigo-500"></i></div>';
                    const prompt = `Bir kullanıcı '${habitName}' alışkanlığını hayatına dahil etmek istiyor. Bu alışkanlık için 5 adımlık basit, motive edici ve uygulanabilir bir eylem planı oluştur. Cevabını numaralandırılmış bir liste olarak, markdown formatında ver.`;
                    const plan = await callGemini(prompt);
                    ui.modalBody.innerHTML = parseMarkdownList(plan);
                } else if (action === 'delete-friend') {
                     const friendId = target.dataset.friendId;
                     if(!isAuthReady || !friendId) return;
                    try {
                        await deleteDoc(doc(friendsCollectionRef, friendId));
                        if(currentView === friendId) { setView(userId); }
                        showToast("Arkadaş silindi.");
                    } catch (error) { console.error("Arkadaş silme hatası:", error); showToast("Arkadaş silinemedi.", "error"); }
                } else if (action === 'close-modal') {
                     modalUtils.close();
                }
            });
            ui.habitForm.addEventListener('submit', async (e) => {
                 e.preventDefault();
                const habitName = ui.habitInput.value.trim();
                if (habitName && isAuthReady) {
                    try {
                        await addDoc(habitsCollectionRef, { name: habitName, completions: [], createdAt: serverTimestamp(), level: 1, xp: 0, ownerId: userId });
                        ui.habitInput.value = '';
                    } catch (error) { console.error("Alışkanlık ekleme hatası: ", error); }
                }
            });
            ui.addFriendForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const friendId = ui.friendIdInput.value.trim();
                if(!friendId) { showToast("Lütfen bir ID girin.", "error"); return; }
                if (friendId === userId) { showToast("Kendinizi arkadaş olarak ekleyemezsiniz.", "error"); return; }
                try {
                    await setDoc(doc(friendsCollectionRef, friendId), { friendId: friendId, addedAt: serverTimestamp() });
                    ui.friendIdInput.value = '';
                    showToast("Arkadaş başarıyla eklendi!");
                } catch(error) { console.error("Arkadaş ekleme hatası:", error); showToast("Arkadaş eklenemedi.", "error"); }
            });
            ui.actionPlanModal.addEventListener('click', (e) => e.target === ui.actionPlanModal && modalUtils.close());
            ui.themeToggle.addEventListener('click', () => {
                const isDark = document.documentElement.classList.toggle('dark');
                localStorage.theme = isDark ? 'dark' : 'light';
                updateThemeIcon(isDark);
            });
        }
        
        async function authenticateUser() {
            try {
                if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                    await signInWithCustomToken(auth, __initial_auth_token);
                } else { await signInAnonymously(auth); }
            } catch (error) { console.error("Kimlik doğrulama hatası:", error); }
        }

        // --- UYGULAMA BAŞLATMA ---
        function initializeAppAndAuth() {
            try {
                app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);
                onAuthStateChanged(auth, async (user) => {
                    if (user) {
                        userId = user.uid;
                        currentView = userId;
                        renderAuthInfo();
                        habitsCollectionRef = collection(db, `artifacts/${appId}/public/data/habits`);
                        friendsCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/friends`);
                        isAuthReady = true;
                        listenForFriends();
                        setView(userId);
                        addEventListeners();
                    } else { await authenticateUser(); }
                });
            } catch (error) { console.error("Firebase başlatma hatası:", error); }
        }
        
        initializeAppAndAuth();
    </script>
</body>
</html>

